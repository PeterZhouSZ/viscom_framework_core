set(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "add a postfix, usually d on windows.")
set(CMAKE_RELEASE_POSTFIX "" CACHE STRING "add a postfix, usually empty on windows.")

set(G3_SHARED_LIB OFF CACHE BOOL "Build shared library." FORCE)
set(BUILD_SHARED_LIBS OFF CACHE BOOL "Force compiler to create static libs." FORCE)
set(ADD_FATAL_EXAMPLE OFF CACHE BOOL "Fatal (fatal-crashes/contract) examples " FORCE)
set(ADD_BUILD_WIN_SHARED OFF CACHE BOOL "Build shared library on Windows" FORCE)
set(USE_DYNAMIC_LOGGING_LEVELS ON CACHE BOOL "Turn ON/OFF log levels. An disabled level will not push logs of that level to the sink. By default dynamic logging is disabled" FORCE)
set(CHANGE_G3LOG_DEBUG_TO_DBUG ON CACHE BOOL "Use DBUG logging level instead of DEBUG. By default DEBUG is the debugging level" FORCE)
add_subdirectory(extern/fwcore/extern/g3log)

set(ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_SAMPLES OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
add_subdirectory(extern/fwcore/extern/assimp)

set(VISCOM_CLIENTGUI ON CACHE BOOL "Use ImGui on clients.")
set(VISCOM_SYNCINPUT ON CACHE BOOL "Synchronize input from master to clients.")
set(VISCOM_CLIENTMOUSECURSOR ON CACHE BOOL "Show the mouse cursor on clients.")
set(VISCOM_APP_NAME "${APP_NAME}" CACHE STRING "Name of the application to be build.")
set(VISCOM_LOCAL_ONLY ON CACHE BOOL "Only do a local build without calibration information.")

set(VISCOM_CONFIG_NAME "single" CACHE STRING "Name/directory of the configuration files to be used.")
set(VISCOM_VIRTUAL_SCREEN_X 1920 CACHE INTEGER "Virtual screen size in x direction.")
set(VISCOM_VIRTUAL_SCREEN_Y 1080 CACHE INTEGER "Virtual screen size in y direction.")

# Build-flags.
if(UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -Wall -Wno-unused-function -Wno-unused-parameter -Wextra -Wpedantic -std=c++14")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -std=c++14")

  # add compiler-options for AppleClang to ignore linker warnings from assimp on macOS
  if (CMAKE_CXX_COMPILER_ID MATCHES "AppleClang")
    add_compile_options(-fvisibility=hidden -fvisibility-inlines-hidden)
  endif()
elseif(MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 /EHsc /MP")
endif()


file(GLOB EXTERN_SOURCES_CORE
	extern/fwcore/extern/imgui/imgui.cpp
	extern/fwcore/extern/imgui/imgui_draw.cpp
	extern/fwcore/extern/imgui/imgui_demo.cpp)
file(GLOB_RECURSE SHADER_FILES_CORE ${PROJECT_SOURCE_DIR}/extern/fwcore/resources/shader/*.*)
file(GLOB_RECURSE SRC_FILES_CORE
    ${PROJECT_SOURCE_DIR}/extern/fwcore/src/core/*.h
    ${PROJECT_SOURCE_DIR}/extern/fwcore/src/core/*.cpp
    ${PROJECT_SOURCE_DIR}/extern/fwcore/src/core/*.inl)
source_group("extern\\core" FILES ${EXTERN_SOURCES_CORE})
source_group("shader\\core" FILES ${SHADER_FILES_CORE})

if (${VISCOM_LOCAL_ONLY})
    list(REMOVE_ITEM SRC_FILES_CORE "${PROJECT_SOURCE_DIR}/extern/fwcore/src/core/CalibrationVertices.h")
    list(REMOVE_ITEM SRC_FILES_CORE "${PROJECT_SOURCE_DIR}/extern/fwcore/src/core/SlaveNodeInternal.h")
    list(REMOVE_ITEM SRC_FILES_CORE "${PROJECT_SOURCE_DIR}/extern/fwcore/src/core/SlaveNodeInternal.cpp")
    list(REMOVE_ITEM SRC_FILES_CORE "${PROJECT_SOURCE_DIR}/extern/fwcore/src/core/OpenCVParserHelper.h")
    list(REMOVE_ITEM SRC_FILES_CORE "${PROJECT_SOURCE_DIR}/extern/fwcore/src/core/OpenCVParserHelper.cpp")
endif()

foreach(f ${SRC_FILES_CORE})
    file(RELATIVE_PATH SRCGR ${PROJECT_SOURCE_DIR}/extern/fwcore ${f})
    string(REGEX REPLACE "(.*)(/[^/]*)$" "\\1" SRCGR ${SRCGR})
    string(REPLACE / \\ SRCGR ${SRCGR})
    source_group("${SRCGR}" FILES ${f})
endforeach()

find_package(OpenGL REQUIRED)
find_library(SGCT_RELEASE_LIBRARY NAMES sgct libsgct PATHS $ENV{SGCT_ROOT_DIR}/lib REQUIRED)
find_library(SGCT_DEBUG_LIBRARY NAMES sgctd libsgctd PATHS $ENV{SGCT_ROOT_DIR}/lib REQUIRED)
find_path(SGCT_INCLUDE_DIRECTORY NAMES sgct PATHS $ENV{SGCT_ROOT_DIR}/include NO_DEFAULT_PATH REQUIRED)

set(SGCT_LIBS
    debug ${SGCT_DEBUG_LIBRARY}
    optimized ${SGCT_RELEASE_LIBRARY}
)

include_directories(${SGCT_INCLUDE_DIRECTORY}
    src
    extern/fwcore/src
    /extern/fwcore/extern/g3log/src
	${CMAKE_CURRENT_BINARY_DIR}/extern/fwcore/extern/g3log/include
    extern/fwcore/extern/imgui
    extern/fwcore/extern/stb
    extern/fwcore/extern/assimp/include
	${CMAKE_CURRENT_BINARY_DIR}/extern/fwcore/extern/assimp/include)

list(APPEND CORE_LIBS ${SGCT_LIBS} ${OPENGL_LIBRARY} ws2_32 g3logger assimp)

if(MSVC)
    list(APPEND COMPILE_TIME_DEFS _CRT_SECURE_NO_WARNINGS _SCL_SECURE_NO_WARNINGS)
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${APP_NAME})
endif()

if (${VISCOM_CLIENTMOUSECURSOR})
    list(APPEND COMPILE_TIME_DEFS VISCOM_CLIENTGUI VISCOM_SYNCINPUT VISCOM_CLIENTMOUSECURSOR)
else()
    if(${VISCOM_SYNCINPUT})
        list(APPEND COMPILE_TIME_DEFS VISCOM_SYNCINPUT)
    endif()
    if(${VISCOM_CLIENTGUI})
        list(APPEND COMPILE_TIME_DEFS VISCOM_CLIENTGUI)
    endif()
endif()

if (${VISCOM_LOCAL_ONLY})
    list(APPEND COMPILE_TIME_DEFS VISCOM_LOCAL_ONLY)
endif()
